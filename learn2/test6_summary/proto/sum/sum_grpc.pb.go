// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v5.28.2
// source: learn2/test6_summary/proto/sum/sum.proto

package sum

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ComputerClient is the client API for Computer service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ComputerClient interface {
	Add(ctx context.Context, in *AddPRCRequest, opts ...grpc.CallOption) (*AddRPCResponse, error)
	Append(ctx context.Context, in *AppendRPCRequest, opts ...grpc.CallOption) (*AppendRPCResponse, error)
}

type computerClient struct {
	cc grpc.ClientConnInterface
}

func NewComputerClient(cc grpc.ClientConnInterface) ComputerClient {
	return &computerClient{cc}
}

func (c *computerClient) Add(ctx context.Context, in *AddPRCRequest, opts ...grpc.CallOption) (*AddRPCResponse, error) {
	out := new(AddRPCResponse)
	err := c.cc.Invoke(ctx, "/sum.Computer/Add", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *computerClient) Append(ctx context.Context, in *AppendRPCRequest, opts ...grpc.CallOption) (*AppendRPCResponse, error) {
	out := new(AppendRPCResponse)
	err := c.cc.Invoke(ctx, "/sum.Computer/Append", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ComputerServer is the server API for Computer service.
// All implementations must embed UnimplementedComputerServer
// for forward compatibility
type ComputerServer interface {
	Add(context.Context, *AddPRCRequest) (*AddRPCResponse, error)
	Append(context.Context, *AppendRPCRequest) (*AppendRPCResponse, error)
	mustEmbedUnimplementedComputerServer()
}

// UnimplementedComputerServer must be embedded to have forward compatible implementations.
type UnimplementedComputerServer struct {
}

func (UnimplementedComputerServer) Add(context.Context, *AddPRCRequest) (*AddRPCResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Add not implemented")
}
func (UnimplementedComputerServer) Append(context.Context, *AppendRPCRequest) (*AppendRPCResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Append not implemented")
}
func (UnimplementedComputerServer) mustEmbedUnimplementedComputerServer() {}

// UnsafeComputerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ComputerServer will
// result in compilation errors.
type UnsafeComputerServer interface {
	mustEmbedUnimplementedComputerServer()
}

func RegisterComputerServer(s grpc.ServiceRegistrar, srv ComputerServer) {
	s.RegisterService(&Computer_ServiceDesc, srv)
}

func _Computer_Add_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddPRCRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ComputerServer).Add(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sum.Computer/Add",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ComputerServer).Add(ctx, req.(*AddPRCRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Computer_Append_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AppendRPCRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ComputerServer).Append(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sum.Computer/Append",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ComputerServer).Append(ctx, req.(*AppendRPCRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Computer_ServiceDesc is the grpc.ServiceDesc for Computer service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Computer_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "sum.Computer",
	HandlerType: (*ComputerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Add",
			Handler:    _Computer_Add_Handler,
		},
		{
			MethodName: "Append",
			Handler:    _Computer_Append_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "learn2/test6_summary/proto/sum/sum.proto",
}
