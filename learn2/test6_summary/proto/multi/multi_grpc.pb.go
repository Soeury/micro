// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v5.28.2
// source: learn2/test6_summary/proto/multi/multi.proto

package multi

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// MultiClient is the client API for Multi service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MultiClient interface {
	Multiply(ctx context.Context, in *MultiRequest, opts ...grpc.CallOption) (*MultiResponse, error)
}

type multiClient struct {
	cc grpc.ClientConnInterface
}

func NewMultiClient(cc grpc.ClientConnInterface) MultiClient {
	return &multiClient{cc}
}

func (c *multiClient) Multiply(ctx context.Context, in *MultiRequest, opts ...grpc.CallOption) (*MultiResponse, error) {
	out := new(MultiResponse)
	err := c.cc.Invoke(ctx, "/multi.Multi/Multiply", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MultiServer is the server API for Multi service.
// All implementations must embed UnimplementedMultiServer
// for forward compatibility
type MultiServer interface {
	Multiply(context.Context, *MultiRequest) (*MultiResponse, error)
	mustEmbedUnimplementedMultiServer()
}

// UnimplementedMultiServer must be embedded to have forward compatible implementations.
type UnimplementedMultiServer struct {
}

func (UnimplementedMultiServer) Multiply(context.Context, *MultiRequest) (*MultiResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Multiply not implemented")
}
func (UnimplementedMultiServer) mustEmbedUnimplementedMultiServer() {}

// UnsafeMultiServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MultiServer will
// result in compilation errors.
type UnsafeMultiServer interface {
	mustEmbedUnimplementedMultiServer()
}

func RegisterMultiServer(s grpc.ServiceRegistrar, srv MultiServer) {
	s.RegisterService(&Multi_ServiceDesc, srv)
}

func _Multi_Multiply_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MultiRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MultiServer).Multiply(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/multi.Multi/Multiply",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MultiServer).Multiply(ctx, req.(*MultiRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Multi_ServiceDesc is the grpc.ServiceDesc for Multi service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Multi_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "multi.Multi",
	HandlerType: (*MultiServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Multiply",
			Handler:    _Multi_Multiply_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "learn2/test6_summary/proto/multi/multi.proto",
}
